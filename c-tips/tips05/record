ADT:参考《C和指针》第2版第17章


二叉搜索树:binary search tree
1.每个非根节点最多2个孩子节点:左孩子 右孩子
2.节点值比左子树的所有节点的值大，比右子树的所有节点的值小

基本操作:插入节点 删除节点 查找节点 遍历节点(前序 中序 后序 层次)
todo 遍历(递归/非递归)
todo 打印出树的结构


数组时左右和双亲的关系(下标从1开始计算):
    节点N的双亲是节点是N/2
    节点N的左孩子节点是2N
    节点N的右孩子节点是2N+1

数组时左右和双亲的关系(下标从0开始计算):
    节点N的双亲是节点是(N+1)/2-1
    节点N的左孩子节点是2N+1
    节点N的右孩子节点是2N+2


插入节点:
    如果树为空:
        把新值作为根节点插入
    否则:
        如果新值小于当前节点的值:
            把新值插入到当前节点的左子树
        否则:
            把新值插入到当前节点的右子树

查找节点:
    如果树为空:
            这个值不在树中
    否则:
        如果这个值和当前根节点的值相等
            找到这个值
        否则:
            如果这个值小于当前根节点的值
                查找左子树
            否则:
                查找右子树



删除节点:

前序遍历:

